import { isInt } from '../isInt.js';
import { validateEntity } from '../validateEntity.js';

describe('функция validateEntity', () => {
    const mockValidEntity = {
        id: 1,
        name: 'John',
        age: 30,
        email: 'john@gmail.com',
    };
    const mockInvalidEntity = {
        id: 1,
        name: 'John',
        age: -1,
        email: 'john@com',
    };
    const mockRules = {
        age: [(x: any) => isInt(x), 'Error'],
    };

    test('должна вернуть объект с флагом valid в true и пустым объектом errors, если все правила валидации пройдены', () => {
        const result = validateEntity<typeof mockValidEntity>(mockValidEntity, mockRules);
        expect(result.valid).toBe(true);
        expect(result.errors).toEqual({});
    });

    test('должна вернуть объект с флагом valid в false и объектом errors, содержащим ошибки валидации, если не все правила валидации пройдены', () => {
        const result = validateEntity(mockInvalidEntity, mockRules);
        expect(result.valid).toBe(false);
        expect(result.errors).toEqual({
            age: 'Возраст должен быть целым числом и больше 0',
            email: 'Некорректный email',
        });
    });

    test('должна правильно обрабатывать отсутствующие свойства валидируемого объекта', () => {
        const result = validateEntity({ name: 'John' }, mockRules);
        expect(result.valid).toBe(false);
        expect(result.errors).toEqual({
            age: 'undefined is not a function',
            email: 'undefined is not a function',
        });
    });
});
